@model FoireMuses.WebInterface.Models.ListViewModel<FoireMuses.Client.ScoreSearchItem>
@using FoireMuses.WebInterface.HtmlHelpers
@{
    ViewBag.HeadTitle = "All Scores";
}
@if (Model.SearchResult.Rows.Count() == 0)
{
    <div id="noResults">
        <p>Il n'y a aucun air actuellement, @Html.ActionLink("créer un air", "Create", "Scores", null, null)</p>
    </div>
}
else
{
<div id="pre-list">
Airs
</div>
<div id="list-item">
<ul>
@{bool fonce = true;
  foreach (var score in Model.SearchResult.Rows)
  {
      if (fonce)
      {
            <li class="fonce">
            <div class="score-item">
            <div class="score-title"><a href="Details?scoreId=@score.Id">@score.Title</a></div>
            @if (score.Editor != null)
            {
                <div class="score-editor">edited by @score.Editor</div>
            }
            
            @if (score.Composer != null)
            {
                if (score.Editor != null)
                {
                <div class="score-composer">, composed by @score.Composer</div>
                }
                else
                {
                    <div class="score-composer">composed by @score.Composer</div>
                }
            }
        </div>
        </li>
      }
      else
      {
          <li>
            <div class="score-item">
            <div class="score-title"><a href="Details?scoreId=@score.Id">@score.Title</a></div>
            @if (score.Editor != null)
            {
                <div class="score-editor">edited by @score.Editor</div>
            }
            
            @if (score.Composer != null)
            {
                if (score.Editor != null)
                {
                <div class="score-composer">, composed by @score.Composer</div>
                }
                else
                {
                    <div class="score-composer">composed by @score.Composer</div>
                }
            }
        </div>
        </li>
            
      }

      fonce = !fonce;
  }
}
</ul>
</div>
<div id="pager">
       @Html.PageLinks(Model.TotalPages, Model.CurrentPage,
            x => Url.Action("List", new { page = x }))
</div>
}