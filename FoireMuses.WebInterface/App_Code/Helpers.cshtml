
@using FoireMuses.WebInterface.Helpers;
@using FoireMuses.Client;

@helper AddField(string aFieldName, string aFieldValue, bool isBold = false, bool aDisplayNullValue = true)
	{
		if ((!String.IsNullOrWhiteSpace(aFieldValue)) || (aDisplayNullValue))
		{
		<div class="label">@aFieldName :</div>
		<div class="value">
			@if (!String.IsNullOrEmpty(aFieldValue))
   {
	   if (isBold)
	   {
					<em>@aFieldValue</em>
	   }
	   else
	   {
					@System.Web.Mvc.MvcHtmlString.Create(aFieldValue.Replace("\n", "<br/>"))
	   }
   }
		</div>
		}
}

@helper AddField(string aFieldName, int? aFieldValue, bool isBold = false, bool aDisplayNullValue = true)
	{
		if (aFieldValue.HasValue || (aDisplayNullValue))
		{
		<div class="label">@aFieldName :</div>
		<div class="value">
			@if (aFieldValue.HasValue)
   {
	   if (isBold)
	   {
					<em>@aFieldValue.Value</em>
	   }
	   else
	   {
					@aFieldValue.Value
	   }
   }
		</div>
		}
}

@helper  CheckboxInputField(string fieldName, string fieldExpression, bool? fieldValue)
	{
	<label for="@fieldExpression">
		@fieldName
	</label>
		if (fieldValue.HasValue && fieldValue.Value)
		{
		<input class="checkbox" type="checkbox" id="@fieldExpression" name="@fieldExpression" value="true" checked="checked"/>
		}
		else
		{
		<input class="checkbox" type="checkbox" id="@fieldExpression" name="@fieldExpression" value="true"/>
		}
	<input type="hidden" name="@fieldExpression" value="false" />
}

@helper TextInputField(string fieldName, string fieldExpression, string fieldValue)
	{
	<label for="@fieldExpression">
		@fieldName
	</label>
	<input type="text" id="@fieldExpression" name="@fieldExpression" value="@fieldValue" />
}

@helper TextInputField(string fieldName, string fieldExpression, int? fieldValue)
	{
	<label for="@fieldExpression">
		@fieldName
	</label>
	<input type="text" id="@fieldExpression" name="@fieldExpression" value="@fieldValue" />
}

@helper  PasswordInputField(string fieldName, string fieldExpression, string fieldValue)
	{
	<label for="@fieldExpression">
		@fieldName
	</label>
	<input type="password" id="@fieldExpression" name="@fieldExpression" value="@fieldValue" />
}

@helper TextareaInputField(string fieldName, string fieldExpression, string fieldValue)
	{
	<label for="@fieldExpression">
		@fieldName
	</label>
	<textarea id="@fieldExpression" rows="20" name="@fieldExpression">@fieldValue</textarea>
}

@helper  HiddenInputField(string fieldExpression, string fieldValue)
	{
	<input type="hidden" id="@fieldExpression" name="@fieldExpression" value="@fieldValue" />
}

@helper DisplayPlay(Play aPlay, int? anActNumber, int? aSceneNumber)
	{
	@aPlay.Title
	if (anActNumber.HasValue && anActNumber.Value != 0)
	{
		@:, Act @RomanNumber.ToRoman(anActNumber.Value)
	}
	if (aSceneNumber.HasValue && aSceneNumber.Value != 0)
	{
		@:, Scène @aSceneNumber
	}
}
@helper DisplaySource(Source aSource, string aPage, int? anAirNumber, int? aTome, int? aVolume)
	{
	<a href="/Sources/Details?sourceId=@aSource.Id" title="">
		@aSource.Name
	</a>
		if (aSource.DateFrom.HasValue)
		{
			@: (@aSource.DateFrom.Value)
		}
		if (!String.IsNullOrEmpty(aPage))
		{
			@:, Page @aPage
		}
		if (anAirNumber.HasValue)
		{
			@:, Air @anAirNumber.Value
		}
		if (aTome.HasValue)
		{
			@:, Tome @RomanNumber.ToRoman(aTome.Value)
		}
		if (aVolume.HasValue)
		{
			@:, Volume @RomanNumber.ToRoman(aVolume.Value)
		}
}

@helper DisplayMusicalSource(CompleteMusicalSource aMusicalSource)
	{
	if (aMusicalSource != null && aMusicalSource.Source != null)
	{
		<div>
			Musical Source : <span class="@(aMusicalSource.IsSuggested.HasValue && aMusicalSource.IsSuggested.Value ? "suggested" : String.Empty)">
				@Helpers.DisplaySource(aMusicalSource.Source, aMusicalSource.Page, aMusicalSource.AirNumber, aMusicalSource.Tome, aMusicalSource.Volume)
			</span>
		</div>
	}
}

@helper DisplayTextualSource(CompleteTextualSource aTextualSource){
	if (aTextualSource != null && aTextualSource.Source != null){
		<div>
			Textual Source : @Helpers.DisplaySource(aTextualSource.Source, aTextualSource.Page, aTextualSource.AirNumber, aTextualSource.Tome, aTextualSource.Volume)<br />
			@if (aTextualSource.Play != null){
				<div>
					Associated Play : @Helpers.DisplayPlay(aTextualSource.Play, aTextualSource.ActNumber, aTextualSource.SceneNumber);
				</div>
			}
		</div>
	}
}

@helper Pager(SearchResult aSearchResult, Func<int, string> pageUrl){
		if (aSearchResult.TotalCount > aSearchResult.Max)
		{
	<div id="pager">
	@{
			int totalPage = (aSearchResult.TotalCount / aSearchResult.Max) + 1;
			int currentPage = (aSearchResult.Offset / aSearchResult.Max) + 1;

			if (currentPage != 1)
			{
			<a href="@pageUrl(1)">&lt;&lt;</a>
			<a href="@pageUrl(currentPage - 1)">&lt;</a>
			}

			int pageToGoFrom = currentPage;
			if (currentPage >= (totalPage - 10))
			{
				pageToGoFrom = (totalPage - 9);
			}
			if (pageToGoFrom < 1)
			{
				pageToGoFrom = 1;
			}

			for (int i = pageToGoFrom; i < pageToGoFrom + 10 && i <= totalPage; i++)
			{
			<a class="@(i == currentPage ? "selected" : String.Empty)" href="@pageUrl(i)">@i.ToString()</a>
			}

			if (currentPage != totalPage)
			{
			<a href="@pageUrl(currentPage + 1)">&gt;</a>
			<a href="@pageUrl(totalPage)">&gt;&gt;</a>
			}
	}
	</div>
		}
}


@helper DisplayScoreSearchResult(SearchResult<ScoreSearchItem> aSearchResult, Func<int, string> pageUrl){
	<ul>
		@{
			bool even = true;
			foreach (var score in aSearchResult.Rows){
				<li class="@(even ? "even_row" : "odd_row")">
					<div class="score-item">
						<div class="score-title">
							<a href="Details?scoreId=@score.Id">@score.Title</a>
						</div>
						@DisplayMusicalSource(score.MusicalSource)
						@DisplayTextualSource(score.TextualSource)
					</div>
				</li>
				even = !even;
			}
		}
	</ul>

	@Pager(aSearchResult, pageUrl);
}

